{"version":3,"sources":["error.js"],"names":["ErrorHandler","message","statusCode","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","Error","errorHandler","err","req","res","status","json","success"],"mappings":"+0EAAMA,wBACF,SAAAA,EAAYC,EAAUC,GAAW,IAAAC,EAAA,OAAAC,gBAAAC,KAAAL,IAC7BG,EAAAG,2BAAAD,KAAAE,gBAAAP,GAAAQ,KAAAH,KAAMJ,KACDC,WAAaA,EAFWC,sCADVM,aAOdC,aAAgB,SAACC,EAAMC,EAAMC,GAGtC,OAFAF,EAAIV,QAAUU,EAAIV,SAAW,sBAC7BU,EAAIT,WAAaS,EAAIT,YAAc,IAC5BW,EAAIC,OAAOH,EAAIT,YAAYa,KAAK,CACnCC,SAAU,EACVf,QAAUU,EAAIV,0DAIPD","file":"error.min.js","sourcesContent":["class ErrorHandler extends Error{\r\n    constructor(message , statusCode){\r\n        super(message);\r\n        this.statusCode = statusCode\r\n    }\r\n}\r\n\r\nexport const errorHandler  = (err , req , res , next)=> {\r\n    err.message = err.message || \"internal server err\"\r\n    err.statusCode = err.statusCode || 500 ;\r\n    return res.status(err.statusCode).json({\r\n        success : false,\r\n        message : err.message,\r\n    })\r\n}\r\n\r\nexport default ErrorHandler"]}